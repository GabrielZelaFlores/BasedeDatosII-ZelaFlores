-- PARTE 2: PROPIEDADES ACID EN LA PRÁCTICA
BEGIN;
    SELECT numero_cuenta, titular, saldo FROM cuentas WHERE numero_cuenta IN ('CTA-005', 'CTA-004');
    -- Intentar transferencia imposible (saldo $4500) transfiere $6000 a Juan
    UPDATE cuentas SET saldo = saldo - 6000.00 WHERE numero_cuenta = 'CTA-005';
    UPDATE cuentas SET saldo = saldo + 6000.00 WHERE numero_cuenta = 'CTA-004';
    -- Esto provocará un rollback automático por violación de CHECK (saldo < 0)
COMMIT;

-- 2.1.2 Demostrar rollback manual
BEGIN;
    -- Simular un proceso de múltiples pasos
    INSERT INTO pedidos (cliente_nombre, cliente_email)
    VALUES ('Cliente Temporal', 'temp@test.com');
    INSERT INTO detalle_pedidos (pedido_id, producto_id, cantidad, precio_unitario, subtotal)
    VALUES (2, 1, 5, 2500.00, 12500.00);
    ROLLBACK; 
    SELECT COUNT(*) as pedidos_temporales FROM pedidos WHERE cliente_nombre = 'Cliente Temporal';
    SELECT stock FROM productos WHERE id = 1; 

-- Paso 2.2: Demostrando CONSISTENCIA
BEGIN;
    -- Intentar crear inconsistencias en los datos
    INSERT INTO cuentas (numero_cuenta, titular, saldo)
    VALUES ('CTA-999', 'Cuenta Inválida', -1000.00);
COMMIT; 

-- 2.2.2 Consistencia en relaciones
BEGIN;
    -- Intentar crear un detalle de pedido para un pedido inexistente
    INSERT INTO detalle_pedidos (pedido_id, producto_id, cantidad, precio_unitario, subtotal)
    VALUES (9999, 1, 1, 180.00, 180.00); -- pedido_id 9999 no existe
COMMIT; -- Fallará por violación de clave foránea

-- Paso 2.3: Demostrando AISLAMIENTO
BEGIN;
    SELECT saldo FROM cuentas WHERE numero_cuenta = 'CTA-004'; 

-- VENTANA 2 (Sesión B):
BEGIN;
    SELECT saldo FROM cuentas WHERE numero_cuenta = 'CTA-004'; -- También: $1500
    UPDATE cuentas SET saldo = saldo - 200.00 WHERE numero_cuenta = 'CTA-004';
COMMIT; -- Sesión B termina primero
    -- Volver a VENTANA 1:
    UPDATE cuentas SET saldo = saldo - 500.00 WHERE numero_cuenta = 'CTA-004';
COMMIT;
    -- Verificar el resultado final
    SELECT numero_cuenta, titular, saldo FROM cuentas WHERE numero_cuenta = 'CTA-004';
    -- El saldo final debería ser: $1500 - 200 - 500 = $800

-- PARTE 3: MANEJO DE ERRORES Y ROLLBACK

BEGIN;
    -- Error por CHECK constraint
    INSERT INTO cuentas SET saldo = -100 WHERE numero_cuenta = 'CTA-001';
COMMIT; -- Error: new row for relation "cuentas" violates check constraint "saldo_positivo"

-- Error por UNIQUE constraint
BEGIN;
    INSERT INTO cuentas (numero_cuenta, titular, saldo)
    VALUES ('CTA-001', 'Cuenta Duplicada', 1000.00); -- CTA-001 ya existe
COMMIT; -- Error: duplicate key value violates unique constraint

-- Error por FOREIGN KEY constraint
BEGIN;
    INSERT INTO detalle_pedidos (pedido_id, producto_id, cantidad, precio_unitario, subtotal)
    VALUES (9999, 1, 1, 180.00, 180.00); -- pedido_id 9999 no existe
COMMIT; -- Error: insert or update on table "detalle_pedidos" violates foreign key constraint

-- 3.1.2 Manejo programático de errores
DO $$
DECLARE
    saldo_actual DECIMAL(12, 2);
BEGIN
    -- Intentar una operación que puede fallar
    UPDATE cuentas SET saldo = saldo - 1000
    WHERE numero_cuenta = 'CTA-inexistente';
    -- Verificar si la actualización afectó alguna fila
    GET DIAGNOSTICS saldo_actual = ROW_COUNT;
    IF saldo_actual = 0 THEN
        RAISE EXCEPTION 'Transferencia exitosa';
    END IF;
EXCEPTION
    WHEN cuenta_inexistente THEN
        RAISE NOTICE 'La cuenta no existe';
        ROLLBACK;
    WHEN check_violation THEN
        RAISE NOTICE 'Error: Saldo insuficiente';
        ROLLBACK;
END;
$$;

-- Paso 3.2: Rollback manual vs automático
-- 3.2.1 Rollback manual con SAVEPOINT
BEGIN;
    -- Operación 1: Éxito
    INSERT INTO cuentas (numero_cuenta, titular, saldo)
    VALUES ('CTA-TEMP1', 'Cuenta Temporal 1', 1000.00);
    SAVEPOINT sp1;
    -- Operación 2: Problema
    INSERT INTO cuentas (numero_cuenta, titular, saldo)
    VALUES ('CTA-TEMP2', 'Cuenta Temporal 2', -500.00); -- Violará CHECK
    SAVEPOINT sp2; -- Esto fallará, crear otro savepoint
    -- Operación 3: Más cambios
    UPDATE cuentas SET saldo = saldo + 100 WHERE numero_cuenta = 'CTA-TEMP1';
    -- Si hay error en operación 2, podemos hacer:
    ROLLBACK TO sp1; -- Solo deshace operación 2, mantiene operación 1
    -- Corregir la operación problemática
    INSERT INTO cuentas (numero_cuenta, titular, saldo)
    VALUES ('CTA-TEMP2', 'Cuenta Temporal 2', 500.00); -- Ahora correcto
COMMIT;
    -- Verificar resultado
    SELECT * FROM cuentas WHERE numero_cuenta LIKE 'CTA-TEMP%';

-- 3.2.2 Simulación de falla del sistema
CREATE OR REPLACE FUNCTION simular_falla_sistema()
RETURNS VOID AS $$
BEGIN
    RAISE EXCEPTION 'Falla simulada del sistema';
END;
$$ LANGUAGE plpgsql;

-- Usar la función en una transacción
BEGIN;
    UPDATE cuentas SET saldo = saldo + 1000 WHERE numero_cuenta = 'CTA-001';
    -- Simular falla en el medio de la transacción
    PERFORM simular_falla_sistema();
    UPDATE cuentas SET saldo = saldo + 1000 WHERE numero_cuenta = 'CTA-002';
COMMIT;
    -- Verificar que ningún cambio se aplicó (rollback automático)
    SELECT numero_cuenta, saldo FROM cuentas WHERE numero_cuenta IN ('CTA-001', 'CTA-002');
END;