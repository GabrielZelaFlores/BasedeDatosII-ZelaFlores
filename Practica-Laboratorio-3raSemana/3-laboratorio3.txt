--PARTE 5
SELECT schemaname, tablename, n_tup_ins, n_tup_upd, n_tup_del, last_vacuum, last_analyze
FROM pg_stat_user_tables;

ANALYZE clientes;
ANALYZE pedidos;
ANALYZE productos;
ANALYZE detalle_pedidos;

--5.2: Impacto de las Estadísticas
INSERT INTO clientes (nombre, email, ciudad, fecha_registro, activo)
SELECT 'NuevoCliente ' || generate_series, 'nuevo' || generate_series || '@email.com', 'Lima', CURRENT_DATE, true
FROM generate_series(1, 5000);

EXPLAIN ANALYZE
SELECT c.nombre, p.total, pr.nombre_producto
FROM clientes c
JOIN pedidos p ON c.cliente_id = p.cliente_id
JOIN detalle_pedidos dp ON p.pedido_id = dp.pedido_id
JOIN productos pr ON dp.producto_id = pr.producto_id
WHERE c.ciudad = 'Lima'
AND p.fecha_pedido > '2025-01-01';

--Parte 6: Reescritura de Consultas
EXPLAIN ANALYZE
SELECT c.nombre
FROM clientes c
WHERE c.cliente_id IN (
  SELECT p.cliente_id
  FROM pedidos p
  WHERE p.total > 500
);

EXPLAIN ANALYZE
SELECT c.nombre
FROM clientes c
WHERE EXISTS (
  SELECT 1
  FROM pedidos p
  WHERE p.cliente_id = c.cliente_id
  AND p.total > 500
);

--Paso 6.2: Subconsultas vs JOINs
EXPLAIN ANALYZE
SELECT c.nombre, 
  (SELECT COUNT(*) FROM pedidos p WHERE p.cliente_id = c.cliente_id) as total_pedidos
FROM clientes c
WHERE c.ciudad = 'Lima';

EXPLAIN ANALYZE
SELECT c.nombre, COUNT(p.pedido_id) as total_pedidos
FROM clientes c
LEFT JOIN pedidos p ON c.cliente_id = p.cliente_id
WHERE c.ciudad = 'Lima'
GROUP BY c.cliente_id, c.nombre;

EXPLAIN ANALYZE
SELECT c.nombre,
  SUM(p.total) as total_compras,
  RANK() OVER (ORDER BY SUM(p.total) DESC) as ranking
FROM clientes c
JOIN pedidos p ON c.cliente_id = p.cliente_id
WHERE c.ciudad = 'Lima'
GROUP BY c.cliente_id, c.nombre
ORDER BY ranking;

--PARTE 7: CONSULTAS COMPLEJAS Y OPTIMIZACIÓN

EXPLAIN ANALYZE
WITH ventas_mensuales AS (
  SELECT 
    pr.nombre_producto,
    DATE_TRUNC('month', p.fecha_pedido) as mes,
    SUM(dp.cantidad * dp.precio_unitario) as total_ventas,
    COUNT(DISTINCT p.cliente_id) as clientes_unicos
  FROM productos pr
  JOIN detalle_pedidos dp ON pr.producto_id = dp.producto_id
  JOIN pedidos p ON dp.pedido_id = p.pedido_id
  JOIN clientes c ON p.cliente_id = c.cliente_id
  WHERE p.estado = 'Completado'
  AND p.fecha_pedido > '2020-01-01'
  AND c.ciudad = 'Lima'
  GROUP BY pr.nombre_producto, mes
),
ranking_productos AS (
  SELECT *,
    ROW_NUMBER() OVER (
      PARTITION BY mes
      ORDER BY total_ventas DESC
    ) as rank
  FROM ventas_mensuales
)
SELECT *
FROM ranking_productos
WHERE rank <= 3
ORDER BY mes, rank;

CREATE INDEX idx_pedidos_fecha_estado ON pedidos(fecha_pedido, estado);
CREATE INDEX idx_detalle_pedidos_pedido_producto ON detalle_pedidos(pedido_id, producto_id);